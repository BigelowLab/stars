
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(stars)
Loading required package: abind
Loading required package: sf
Linking to GEOS 3.9.0, GDAL 3.2.0, PROJ 7.2.0
> 
> s1 = st_as_stars(matrix(1:16, 4))
> s2 = st_as_stars(matrix(1:16, 4))
> s3 = st_as_stars(matrix(1:16, 4))
> attr(s1, "dimensions")$X2$delta = -1
> attr(s2, "dimensions")$X1$delta =  2
> attr(s2, "dimensions")$X2$delta = -2
> attr(s3, "dimensions")$X1$delta =  3
> attr(s3, "dimensions")$X2$delta = -3
> plot(s1, axes = TRUE, text_values = TRUE, text_color = 'orange')
> plot(s2, axes = TRUE, text_values = TRUE, text_color = 'orange')
> plot(s3, axes = TRUE, text_values = TRUE, text_color = 'orange')
> 
> # chunk2 
> fn1 = paste0(tempdir(), .Platform$file.sep, "img1.tif")
> fn2 = paste0(tempdir(), .Platform$file.sep, "img2.tif")
> fn3 = paste0(tempdir(), .Platform$file.sep, "img3.tif")
> write_stars(s1, fn1)
> write_stars(s2, fn2)
> write_stars(s3, fn3) 
> (r1 = read_stars(c(fn1, fn2, fn3), proxy = TRUE))
multi-resolution stars_proxy object with 3 attributes in files:
$img1.tif
[1] "[...]/img1.tif"

$img2.tif
[1] "[...]/img2.tif"

$img3.tif
[1] "[...]/img3.tif"

dimension(s):
  from to offset delta refsys point values x/y
x    1  4      0     1     NA    NA   NULL [x]
y    1  4      0    -1     NA    NA   NULL [y]
> 
> # chunk3
> st_as_stars(r1) %>%
+   merge() %>%
+   plot(breaks = "equal", text_values = TRUE, text_color = 'orange', axes = TRUE)
> 
> # chunk4
> st_as_stars(r1[,2:4,2:4]) %>%
+   merge() %>%
+   plot(breaks = "equal", text_values = TRUE, text_color = 'orange', axes = TRUE)
> 
> # chunk5
> s4 = st_as_stars(matrix(1: 16, 4))
> s5 = st_as_stars(matrix(1: 64, 8))
> s6 = st_as_stars(matrix(1:144,12))
> attr(s4, "dimensions")$X2$delta = -1
> attr(s5, "dimensions")$X1$delta =  1/2
> attr(s5, "dimensions")$X2$delta = -1/2
> attr(s6, "dimensions")$X1$delta =  1/3
> attr(s6, "dimensions")$X2$delta = -1/3
> plot(s4, axes = TRUE, text_values = TRUE, text_color = 'orange')
> plot(s5, axes = TRUE, text_values = TRUE, text_color = 'orange')
> plot(s6, axes = TRUE, text_values = TRUE, text_color = 'orange')
> 
> # chunk6
> fn4 = paste0(tempdir(), .Platform$file.sep, "img4.tif")
> fn5 = paste0(tempdir(), .Platform$file.sep, "img5.tif")
> fn6 = paste0(tempdir(), .Platform$file.sep, "img6.tif")
> write_stars(s4, fn4)
> write_stars(s5, fn5)
> write_stars(s6, fn6) 
> (r2 = read_stars(c(fn4, fn5, fn6), proxy = TRUE))
multi-resolution stars_proxy object with 3 attributes in files:
$img4.tif
[1] "[...]/img4.tif"

$img5.tif
[1] "[...]/img5.tif"

$img6.tif
[1] "[...]/img6.tif"

dimension(s):
  from to offset delta refsys point values x/y
x    1  4      0     1     NA    NA   NULL [x]
y    1  4      0    -1     NA    NA   NULL [y]
> 
> st_as_stars(r2) %>%
+   merge() %>%
+   plot(breaks = "equal", text_values = TRUE, text_color = 'orange', axes = TRUE)
> st_as_stars(r2[,2:4,2:4]) %>%
+   merge() %>%
+   plot(breaks = "equal", text_values = TRUE, text_color = 'orange', axes = TRUE)
> 
> # chunk7
> (r3 = read_stars(c(fn6, fn5, fn4), proxy = TRUE))
multi-resolution stars_proxy object with 3 attributes in files:
$img6.tif
[1] "[...]/img6.tif"

$img5.tif
[1] "[...]/img5.tif"

$img4.tif
[1] "[...]/img4.tif"

dimension(s):
  from to offset     delta refsys point values x/y
x    1 12      0  0.333333     NA    NA   NULL [x]
y    1 12      0 -0.333333     NA    NA   NULL [y]
> 
> st_as_stars(r3) %>%
+   merge() %>%
+   plot(breaks = "equal", text_values = TRUE, text_color = 'orange', axes = TRUE)
> st_as_stars(r3[,2:6,3:6]) %>%
+   merge() %>%
+   plot(breaks = "equal", text_values = TRUE, text_color = 'orange', axes = TRUE)
> 
> proc.time()
   user  system elapsed 
  0.956   0.049   0.996 
